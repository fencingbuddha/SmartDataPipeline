"""create sources and raw_events

Revision ID: 7ba82119ad85
Revises: 
Create Date: 2025-09-10 14:26:35.438861

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7ba82119ad85'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('idx_clean_events_source_date'), table_name='clean_events')
    op.drop_table('clean_events')
    op.drop_table('metric_daily')
    op.drop_table('forecast_results')
    op.drop_index(op.f('idx_alerts_lookup'), table_name='alerts')
    op.drop_table('alerts')
    op.add_column('raw_events', sa.Column('received_at', sa.DateTime(), nullable=False))
    op.add_column('raw_events', sa.Column('filename', sa.String(), nullable=False))
    op.add_column('raw_events', sa.Column('content_type', sa.String(), nullable=False))
    op.alter_column('raw_events', 'id',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_index(op.f('idx_raw_events_source'), table_name='raw_events')
    op.drop_index(op.f('idx_raw_events_time'), table_name='raw_events')
    op.create_index(op.f('ix_raw_events_id'), 'raw_events', ['id'], unique=False)
    op.create_index(op.f('ix_raw_events_received_at'), 'raw_events', ['received_at'], unique=False)
    op.create_index(op.f('ix_raw_events_source_id'), 'raw_events', ['source_id'], unique=False)
    op.drop_constraint(op.f('raw_events_source_id_fkey'), 'raw_events', type_='foreignkey')
    op.create_foreign_key(None, 'raw_events', 'sources', ['source_id'], ['id'], ondelete='RESTRICT')
    op.drop_column('raw_events', 'created_at')
    op.drop_column('raw_events', 'ingestion_batch')
    op.drop_column('raw_events', 'event_timestamp')
    op.alter_column('sources', 'name',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.create_index(op.f('ix_sources_id'), 'sources', ['id'], unique=False)
    op.drop_column('sources', 'created_at')
    op.drop_column('sources', 'description')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('sources', sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('sources', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_sources_id'), table_name='sources')
    op.alter_column('sources', 'name',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.add_column('raw_events', sa.Column('event_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=False))
    op.add_column('raw_events', sa.Column('ingestion_batch', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('raw_events', sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'raw_events', type_='foreignkey')
    op.create_foreign_key(op.f('raw_events_source_id_fkey'), 'raw_events', 'sources', ['source_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_raw_events_source_id'), table_name='raw_events')
    op.drop_index(op.f('ix_raw_events_received_at'), table_name='raw_events')
    op.drop_index(op.f('ix_raw_events_id'), table_name='raw_events')
    op.create_index(op.f('idx_raw_events_time'), 'raw_events', ['event_timestamp'], unique=False)
    op.create_index(op.f('idx_raw_events_source'), 'raw_events', ['source_id'], unique=False)
    op.alter_column('raw_events', 'id',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)
    op.drop_column('raw_events', 'content_type')
    op.drop_column('raw_events', 'filename')
    op.drop_column('raw_events', 'received_at')
    op.create_table('alerts',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('metric_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('severity', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('method', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('score', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("severity = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])", name=op.f('alerts_severity_check')),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], name=op.f('alerts_source_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('alerts_pkey'))
    )
    op.create_index(op.f('idx_alerts_lookup'), 'alerts', ['metric_date', 'source_id', 'metric_name'], unique=False)
    op.create_table('forecast_results',
    sa.Column('forecast_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('yhat', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=False),
    sa.Column('yhat_lower', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('yhat_upper', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('model_version', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], name=op.f('forecast_results_source_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('forecast_date', 'source_id', 'metric_name', name=op.f('forecast_results_pkey'))
    )
    op.create_table('metric_daily',
    sa.Column('metric_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], name=op.f('metric_daily_source_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('metric_date', 'source_id', 'metric_name', name=op.f('metric_daily_pkey'))
    )
    op.create_table('clean_events',
    sa.Column('id', sa.BIGINT(), autoincrement=True, nullable=False),
    sa.Column('source_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('event_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('metric_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('value', sa.NUMERIC(precision=18, scale=6), autoincrement=False, nullable=True),
    sa.Column('dimensions', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('raw_event_id', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['raw_event_id'], ['raw_events.id'], name=op.f('clean_events_raw_event_id_fkey')),
    sa.ForeignKeyConstraint(['source_id'], ['sources.id'], name=op.f('clean_events_source_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('clean_events_pkey'))
    )
    op.create_index(op.f('idx_clean_events_source_date'), 'clean_events', ['source_id', 'event_date'], unique=False)
    # ### end Alembic commands ###
